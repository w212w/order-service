
version: '3.8'

services:
  order-service:
      build:
        context: ..
        dockerfile: deployments/Dockerfile
      container_name: order-service
      ports:
        - "8081:8081"
      environment:
        - APP_ENV=docker
        - DB_PORT=5432
        - DB_USER=postgres
        - DB_PASSWORD=postgres
        - DB_NAME=order
        - DB_HOST=db
        - SERVER_PORT=8081
      depends_on:
        db:
            condition: service_healthy
        kafka-init:
            condition: service_completed_successfully            
      networks:
        - internal
  
  producer:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: kafka-producer
    depends_on:
        kafka-init:
            condition: service_completed_successfully
    
    entrypoint: ["/app/producer"]
    restart: "no"
    networks:
      - internal

  kafka-init:
    image: confluentinc/cp-kafka:6.2.9
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "kafka-topics --create
      --if-not-exists
      --bootstrap-server kafka:9092
      --replication-factor 1
      --partitions 1
      --topic orders-topic &&
      echo 'âœ… Kafka topic created'"
    networks:
      - internal

  db:
    image: postgres:17
    container_name: order_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order
    volumes:
      - ./../internal/storage/migrations:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d order'"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - internal

  kafka:
    image: confluentinc/cp-kafka:6.2.9
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - internal
        
volumes:
  postgres_data:

networks:
  internal: